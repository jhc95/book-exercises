# and save it in a vector called 'dinner'
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[["lunch"]]
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(length(), meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
items
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
early_meals
return(meal)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal.append(pizza)
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
meals <- lapply(meals, add_pizza)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal.append("pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
meals <- lapply(meals, add_pizza)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
append(meal, "pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
meals <- lapply(meals, add_pizza)
meals
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal = append(meal, "pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
meals <- lapply(meals, add_pizza)
meals
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, "Goblin")
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[ > 6.5]
earthquakes[earthquakes > 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE)
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered(filter))
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
is.list(shark_length)
shark_length[[-4]]
shark_length[[4]]
is.list(shark_length)
shark_length[4]
is.list(shark_length)
is.list(shark_length)
shark_length[[4]]
is.list(shark_length)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
class(shark_length[[4]])
is.list(shark_length[[4]])
shark_length[[4]]
is.list(shark_length[[4]])
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades[is_participant] <- "Yes"
lab_grades[[is_participant]] <- "Yes"
lab_grades[["is_participant"]] <- "Yes"
lab_grades
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
total_after_tax
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + total_with_discount * sales_tax
total_after_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - (tea + 2*scone) * discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + total_with_discount * sales_tax
total_after_tax
print(total_after_tax)
is.list(shark_length[4])
shark_length[[4]]
is.list(shark_length[[4]])
shark_length[-4]
shark_length[[4]]
shark_length[4]
shark_length[4]
# 2.
class(spring_break)
# 3.
today <- Sys.Date()
#################
#### PART 1 #####
#################
#install.packages("stringr")
# importing used libraries
library(stringr)
# 1.
my_age <- 24
# 2.
my_name <- "Jang Ho Cho"
# 3.
# Takes in two arguments: String name and integer age.
# Returns a string in the format "Hello, my name is {name} and I'm {age} years old"
# replacing name and age with given arguments
make_instruction <- function(name, age){
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# 4.
my_intro <- make_instruction(my_name, my_age)
# 5.
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
# 6.
captital_intro <- str_to_title(my_intro)
# 7.
intro_e_count <- str_count(my_intro, "e")
# 1.
books <- c("Of mice and men", "The hunger games", "Me before you", "The hobbit", "Fahrenheit 451", "Jack and the beanstalk")
# 2.
top_three_books <- books[1:3]
# 3.
book_reviews <- paste(books, "is great to read!")
# 4.
# Returns vector of books without the book at specified index.
remove_book <- function(books, index){
return(books[-index])
}
# 5.
books_without_five <- remove_book(books, 5)
# 6.
long_titles <- books[nchar(books) > 15]
# 1.
numbers <- seq(1:201)
# 2.
squared_numbers <- numbers * numbers
# 3.
squared_mean <- mean(squared_numbers)
# 4.
squared_median <- median(squared_numbers)
# 5.
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
# 1.
spring_break <- as.Date("2020-03-21")
# 2.
class(spring_break)
# 3.
today <- Sys.Date()
# 4.
days_to_break <- spring_break - today
# 5.
# Takes in Date-type date and integer year as arguments.
# Returns Date-type value with its year changed to the given year value
change_year <- function(date, year){
string_date <- as.character(date)
month_and_day <- substr(string_date, 5, nchar(string_date))
new_date <- paste(year, month_and_day, sep="")
return(as.Date(new_date))
}
# 6.
changed <- change_year(spring_break, 2025)
# 7.
# Takes in Date_type date and ignore_year (default = FALSE) as arguments.
# Returns FALSE if given date has not passed and TRUE if given date has passed.
# If ignore_year is set to TRUE then, returns if the date has passed or not
# ignoring the year.
date_has_passed <- function(date, ignore_year=FALSE){
if (ignore_year) {
return(Sys.Date() - change_year(date, as.integer(format(Sys.Date(), "%Y"))) > 0)
}
return(Sys.Date() - date > 0)
}
# 9.
birthdays = c(as.Date("1995-09-11"), as.Date("1994-08-28"), as.Date("1968-07-07"), as.Date("1966-04-25"))
# 10.
# Takes in Date-type dates(birthday) as arguments.
# Returns the next coming birthday.
get_next_birthday <- function(date){
changed <- change_year(date, 2020)
passed <- date_has_passed(changed)
if (passed == TRUE){
return(change_year(date, 2021))
}
return(changed)
}
# 7.
# Takes in Date_type date and ignore_year (default = FALSE) as arguments.
# Returns FALSE if given date has not passed and TRUE if given date has passed.
# If ignore_year is set to TRUE then, returns if the date has passed or not
# ignoring the year.
date_has_passed <- function(date, ignore_year=FALSE){
this_year = as.integer(substring(as.character(Sys.Date), 1, 4))
if (ignore_year) {
return(Sys.Date() - change_year(date, this_year) > 0)
}
return(Sys.Date() - date > 0)
}
# 8.
print(date_has_passed(as.Date("2020-01-23")))
# 8.
print(date_has_passed(as.Date("2020-01-23")))
this_year = as.integer(substring(as.character(Sys.Date()), 1, 4))
# 7.
# Takes in Date_type date and ignore_year (default = FALSE) as arguments.
# Returns FALSE if given date has not passed and TRUE if given date has passed.
# If ignore_year is set to TRUE then, returns if the date has passed or not
# ignoring the year.
date_has_passed <- function(date, ignore_year=FALSE){
this_year = as.integer(substring(as.character(Sys.Date()), 1, 4))
if (ignore_year) {
return(Sys.Date() - change_year(date, this_year) > 0)
}
return(Sys.Date() - date > 0)
}
# 8.
print(date_has_passed(as.Date("2020-01-23")))
# 8.
print(date_has_passed(as.Date("2020-01-24")))
# 8.
print(date_has_passed(as.Date("2020-01-21")))
# 8.
print(date_has_passed(as.Date("2019-01-21")))
# 8.
print(date_has_passed(as.Date("2019-01-25")))
# 8.
print(date_has_passed(as.Date("2019-01-25"), TRUE))
# 8.
print(date_has_passed(as.Date("2019-01-23")))
# 8.
print(date_has_passed(as.Date("2020-01-23")))
# 9.
birthdays = c(as.Date("1995-09-11"), as.Date("1994-08-28"), as.Date("1968-07-07"), as.Date("1966-04-25"))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(40000, 50000)
?runf
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustment <- (100, -5000, 10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustment <- runif(100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries["salaries_2017"]
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries["adjusted"] = salaries["salaries_2017"] + salaries["adjustments"]
salaries
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries["raise"] = salaries["salaries_2017"] < salaries["adjusted"]
salaries
# What was the 2018 salary of Employee 57
salaries[57]["adjusted"]
# What was the 2018 salary of Employee 57
salaries["adjusted"]
# What was the 2018 salary of Employee 57
salaries["adjusted"][57]
# What was the 2018 salary of Employee 57
salaries[57, "adjusted"]
# How many employees got a raise?
length(salaries['raise'])
# How many employees got a raise?
length(salaries[salaries["raise"] == TRUE])
# How many employees got a raise?
length(salaries[salaries["raise"] == TRUE])
# What was the dollar value of the highest raise?
salaries['adjustments'].max()
# What was the dollar value of the highest raise?
salaries['adjustments'].max
# What was the dollar value of the highest raise?
salaries['adjustments']
# What was the dollar value of the highest raise?
max(salaries['adjustments'])
# How many employees got a raise?
length(salaries[salaries["raise"] == TRUE])
# How many employees got a raise?
length(salaries["raise"] == TRUE)
# How many employees got a raise?
length(salaries["raise"])
# How many employees got a raise?
nrow(salaries[salaries["raise"] == TRUE])
# How many employees got a raise?
nrow(salaries[salaries["raise"] == TRUE, ])
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]]
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]['name']
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]['employee']
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]['employees']
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])]
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])][1]
# What was the largest decrease in salaries between the two years?
min(salaries['adjustments'])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries['adjustments'] == min(salaries['adjustments'])][1]
# What was the average salary change?
mean(salaries['adjustments'])
# What was the average salary change?
sum(salaries['adjustments'])
# What was the average salary change?
sum(salaries['adjustments'])/100
# What was the average salary change?
sum(salaries['adjustments'])/row(salaries)
# What was the average salary change?
sum(salaries['adjustments'])/nrow(salaries)
# For people who did not get a raise, how much money did they lose on average?
sum(salaries[salaries['raise'] == FALSE, ]['adjustments'])
# For people who did not get a raise, how much money did they lose on average?
sum(salaries[salaries['raise'] == FALSE, ]['adjustments'])/nrow(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries["adjusted"] = salaries["salaries_2017"] + salaries["adjustments"]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries["raise"] = salaries["salaries_2017"] < salaries["adjusted"]
# What was the 2018 salary of Employee 57
salaries[57, "adjusted"]
# How many employees got a raise?
nrow(salaries[salaries["raise"] == TRUE, ])
# What was the dollar value of the highest raise?
max(salaries['adjustments'])
# What was the "name" of the employee who received the highest raise?
salaries[salaries['adjustments'] == max(salaries['adjustments'])][1]
# What was the largest decrease in salaries between the two years?
min(salaries['adjustments'])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries['adjustments'] == min(salaries['adjustments'])][1]
# What was the average salary change?
sum(salaries['adjustments'])/nrow(salaries)
# For people who did not get a raise, how much money did they lose on average?
sum(salaries[salaries['raise'] == FALSE, ]['adjustments'])/nrow(salaries)
# 8
print(calc_survival_rate("1st"))
# 7
# Takes in ticket class(string) as argument (ex. "1st", "2nd")
# Returns a sentence describing the survival rate of adult men vs women and children
calc_survival_rate <- function(class){
# Select all people from given class
given_class <- titanic_df[titanic_df['Class'] == class, ]
# Select all males
males <- given_class[given_class['Sex'] == 'Male' & given_class['Age'] == 'Adult',]
# Get male survival rate
male_rate <- sum(males[males['Survived'] == 'Yes', 'Freq']) / sum(males$Freq) * 100
# Select all Female and Children
female_children <- given_class[given_class['Sex'] == 'Female' | given_class['Age'] == 'Child', ]
# Get female children survival rate
female_children_rate <- sum(female_children[female_children['Survived'] == 'Yes', 'Freq']) / sum(female_children$Freq) * 100
# return
return(paste("Of ", class," class, ", male_rate,"% of men survived and ", female_children_rate,"% of women and children survived.", sep=""))
}
# 7
# Takes in ticket class(string) as argument (ex. "1st", "2nd")
# Returns a sentence describing the survival rate of adult men vs women and children
calc_survival_rate <- function(class){
# Select all people from given class
given_class <- titanic_df[titanic_df$Class == class, ]
# Select all males
males <- given_class[given_class['Sex'] == 'Male' & given_class['Age'] == 'Adult',]
# Get male survival rate
male_rate <- sum(males[males['Survived'] == 'Yes', 'Freq']) / sum(males$Freq) * 100
# Select all Female and Children
female_children <- given_class[given_class['Sex'] == 'Female' | given_class['Age'] == 'Child', ]
# Get female children survival rate
female_children_rate <- sum(female_children[female_children['Survived'] == 'Yes', 'Freq']) / sum(female_children$Freq) * 100
# return
return(paste("Of ", class," class, ", male_rate,"% of men survived and ", female_children_rate,"% of women and children survived.", sep=""))
}
# 8
print(calc_survival_rate("1st"))
# 1
data("Titanic")
# 2
is.data.frame(Titanic)
# 3
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# 4
children <- titanic_df[titanic_df["Age"] == "Child",]
# 5
num_children <- sum(children$Freq)
# 6
non_survivors <- titanic_df[titanic_df['Survived'] == "No",]
max_losses <- max(non_survivors$Freq)
most_losses <- non_survivors[non_survivors['Freq'] == max_losses,]
# 7
# Takes in ticket class(string) as argument (ex. "1st", "2nd")
# Returns a sentence describing the survival rate of adult men vs women and children
calc_survival_rate <- function(class){
# Select all people from given class
given_class <- titanic_df[titanic_df$Class == class, ]
# Select all males
males <- given_class[given_class['Sex'] == 'Male' & given_class['Age'] == 'Adult',]
# Get male survival rate
male_rate <- sum(males[males['Survived'] == 'Yes', 'Freq']) / sum(males$Freq) * 100
# Select all Female and Children
female_children <- given_class[given_class['Sex'] == 'Female' | given_class['Age'] == 'Child', ]
# Get female children survival rate
female_children_rate <- sum(female_children[female_children['Survived'] == 'Yes', 'Freq']) / sum(female_children$Freq) * 100
# return
return(paste("Of ", class," class, ", male_rate,"% of men survived and ", female_children_rate,"% of women and children survived.", sep=""))
}
# 8
print(calc_survival_rate("1st"))
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
setwd("C:/Users/narsi/Desktop/info200/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# How many grants were awarded in 2010?
nrow(grants)
# Which organization received the smallest grant?
grants[grants$total_amount == min_g, "organization"]
# What was the dollar amount of the smallest grant?
min_g <- min(grants$total_amount)
# Which organization received the smallest grant?
grants[grants$total_amount == min_g, "organization"]
# Which organization received the largest grant?
grants[grants$total_amount == max_G, "organization"]
# What was the dollar amount of the largest grant?
max_g <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min_g <- min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max_g, "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min_g, "organization"]
# How many grants were awarded in 2010?
nrow(grants)
